name: Build and Release APK

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Set up Java (required for Android builds)
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'

    # Set up Flutter
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.29.2'

    # Create .env file
    - name: Create .env file
      run: echo "${{ secrets.ENV_FILE_CONTENT }}" > .env

    # Create gemini_service_account.json file
    - name: Create gemini_service_account.json
      run: echo "${{ secrets.GEMINI_SERVICE_ACCOUNT }}" > lib/core/services/gemini_service_account.json

    # Clean Flutter Cache
    - name: Clean Flutter Cache
      run: flutter clean

    - name: Install dependencies
      run: flutter pub get

    - name: Run Flutter localization codegen
      run: flutter gen-l10n

    # Add keystore file for signing
    - name: Add keystore file
      run: echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > android/app/upload-keystore.jks

    # Add key.properties file
    - name: Add key.properties file
      run: echo "${{ secrets.KEYSTORE_PROPERTIES }}" > android/key.properties

    # Build the signed APK
    - name: Build Signed APK
      run: flutter build apk --release --split-per-abi

    # Create a release and upload the APK
    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: >
            build/app/outputs/flutter-apk/app-release.apk,
            build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk,
            build/app/outputs/flutter-apk/app-arm64-v8a-release.apk,
            build/app/outputs/flutter-apk/app-x86_64-release.apk
        token: ${{ secrets.TOKEN }}
        tag: v${{ github.run_number }}
        name: Release v${{ github.run_number }}